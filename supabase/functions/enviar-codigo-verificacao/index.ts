import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.56.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface EnviarCodigoRequest {
  numero_whatsapp: string;
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('Authorization header required');
    }

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
      }
    );

    // Verificar usu√°rio autenticado
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      throw new Error('User not authenticated');
    }

    const { numero_whatsapp }: EnviarCodigoRequest = await req.json();

    if (!numero_whatsapp || numero_whatsapp.length !== 13 || !numero_whatsapp.startsWith('55')) {
      throw new Error('N√∫mero do WhatsApp deve ter 13 d√≠gitos e come√ßar com 55');
    }

    // Gerar c√≥digo de verifica√ß√£o de 6 d√≠gitos
    const codigo = Math.floor(100000 + Math.random() * 900000).toString();
    
    console.log(`Gerando c√≥digo ${codigo} para n√∫mero ${numero_whatsapp}`);

    // Salvar c√≥digo na configura√ß√£o do usu√°rio
    const { error: updateError } = await supabase
      .from('whatsapp_configuracoes')
      .upsert({
        usuario_id: user.id,
        numero_whatsapp,
        codigo_verificacao: codigo,
        data_codigo: new Date().toISOString(),
        verificado: false,
        api_provider: 'z-api',
        webhook_token: '',
        ativo: true
      }, { onConflict: 'usuario_id' });

    if (updateError) {
      console.error('Erro ao salvar c√≥digo:', updateError);
      throw new Error('Erro ao salvar c√≥digo de verifica√ß√£o');
    }

    // Enviar c√≥digo via WhatsApp
    const instanceUrl = Deno.env.get('WHATSAPP_INSTANCE_URL');
    const apiToken = Deno.env.get('WHATSAPP_API_TOKEN');

    if (!instanceUrl || !apiToken) {
      console.error('Credenciais WhatsApp n√£o configuradas');
      // Em produ√ß√£o, aqui enviaria por SMS ou outro m√©todo
      return new Response(JSON.stringify({ 
        success: true, 
        message: 'C√≥digo gerado. Em ambiente de desenvolvimento, o c√≥digo √©: ' + codigo,
        codigo_debug: codigo // Remover em produ√ß√£o
      }), {
        status: 200,
        headers: { 'Content-Type': 'application/json', ...corsHeaders },
      });
    }

    const mensagem = `üîê *C√≥digo de Verifica√ß√£o Picotinho*\n\nSeu c√≥digo de verifica√ß√£o √©: *${codigo}*\n\nEste c√≥digo expira em 10 minutos.\n\n_N√£o compartilhe este c√≥digo com ningu√©m._`;

    const whatsappResponse = await fetch(`${instanceUrl}/send-text`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Client-Token': apiToken,
      },
      body: JSON.stringify({
        phone: numero_whatsapp,
        message: mensagem,
      }),
    });

    const whatsappResult = await whatsappResponse.json();
    console.log('Resposta WhatsApp:', whatsappResult);

    if (!whatsappResponse.ok) {
      console.error('Erro ao enviar mensagem WhatsApp:', whatsappResult);
      throw new Error('Erro ao enviar c√≥digo por WhatsApp');
    }

    return new Response(JSON.stringify({ 
      success: true, 
      message: 'C√≥digo de verifica√ß√£o enviado com sucesso!'
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json', ...corsHeaders },
    });

  } catch (error) {
    console.error('Erro na fun√ß√£o enviar-codigo-verificacao:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Erro interno do servidor' 
      }),
      {
        status: 400,
        headers: { 'Content-Type': 'application/json', ...corsHeaders },
      }
    );
  }
};

serve(handler);